// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type ListViewsRequest struct {
	// The associated sheet ID of the view.
	SheetId SheetId `json:"-" url:"sheetId"`
	// Number of prompts to return in a page (default 10)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of prompts to return
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
}

// View ID
type ViewId = string

type ListViewsResponse struct {
	Pagination *Pagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*View     `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListViewsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListViewsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListViewsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListViewsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ViewCreate struct {
	SheetId SheetId     `json:"sheetId" url:"sheetId"`
	Name    string      `json:"name" url:"name"`
	Config  *ViewConfig `json:"config,omitempty" url:"config,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ViewCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler ViewCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ViewCreate(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ViewCreate) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ViewResponse struct {
	Data *View `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ViewResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ViewResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ViewResponse(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ViewResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ViewUpdate struct {
	Name   *string     `json:"name,omitempty" url:"name,omitempty"`
	Config *ViewConfig `json:"config,omitempty" url:"config,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ViewUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler ViewUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ViewUpdate(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ViewUpdate) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
