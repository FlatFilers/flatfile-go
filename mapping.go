// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

// Mapping Rule ID
type MappingId = string

type MappingRuleConfig struct {
	// Name of the mapping rule
	Name   string          `json:"name"`
	Type   MappingRuleType `json:"type,omitempty"`
	Config interface{}     `json:"config,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRuleConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MappingRuleConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MappingRuleConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRuleConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MappingRuleResponse struct {
	Data *MappingRule `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRuleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MappingRuleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MappingRuleResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRuleResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MappingRulesResponse struct {
	Data []*MappingRule `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRulesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MappingRulesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MappingRulesResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRulesResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}
