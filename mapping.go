// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
	time "time"
)

type DeleteAllHistoryForUserRequest struct {
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
}

type ListProgramsRequest struct {
	// Number of programs to return in a page (default 10)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of records to return
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// Filter by creator
	CreatedBy *UserId `json:"-" url:"createdBy,omitempty"`
	// Filter by creation time
	CreatedAfter *time.Time `json:"-" url:"createdAfter,omitempty"`
	// Filter by creation time
	CreatedBefore *time.Time `json:"-" url:"createdBefore,omitempty"`
	// The ID of the environment
	EnvironmentId *EnvironmentId `json:"-" url:"environmentId,omitempty"`
	// Filter by family
	FamilyId *FamilyId `json:"-" url:"familyId,omitempty"`
	// Filter by namespace
	Namespace *string `json:"-" url:"namespace,omitempty"`
	// Filter by source keys
	SourceKeys *string `json:"-" url:"sourceKeys,omitempty"`
	// Filter by destination keys
	DestinationKeys *string `json:"-" url:"destinationKeys,omitempty"`
}

// Mapping Family ID
type FamilyId = string

// Mapping Rule ID
type MappingId = string

// Mapping Program ID
type ProgramId = string

type CreateMappingRulesRequest = []*MappingRuleConfig

type MappingRuleConfig struct {
	// Name of the mapping rule
	Name   string      `json:"name" url:"name"`
	Type   string      `json:"type" url:"type"`
	Config interface{} `json:"config,omitempty" url:"config,omitempty"`
	// Time the mapping rule was last updated
	AcceptedAt *time.Time `json:"acceptedAt,omitempty" url:"acceptedAt,omitempty"`
	// User ID of the contributor of the mapping rule
	AcceptedBy *UserId `json:"acceptedBy,omitempty" url:"acceptedBy,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRuleConfig) UnmarshalJSON(data []byte) error {
	type embed MappingRuleConfig
	var unmarshaler = struct {
		embed
		AcceptedAt *core.DateTime `json:"acceptedAt,omitempty"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MappingRuleConfig(unmarshaler.embed)
	m.AcceptedAt = unmarshaler.AcceptedAt.TimePtr()
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRuleConfig) MarshalJSON() ([]byte, error) {
	type embed MappingRuleConfig
	var marshaler = struct {
		embed
		AcceptedAt *core.DateTime `json:"acceptedAt,omitempty"`
	}{
		embed:      embed(*m),
		AcceptedAt: core.NewOptionalDateTime(m.AcceptedAt),
	}
	return json.Marshal(marshaler)
}

func (m *MappingRuleConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MappingRuleResponse struct {
	Data *MappingRule `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRuleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MappingRuleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MappingRuleResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRuleResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MappingRulesResponse struct {
	Data []*MappingRule `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MappingRulesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MappingRulesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MappingRulesResponse(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MappingRulesResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ProgramConfig struct {
	// Source schema
	Source *SheetConfig `json:"source,omitempty" url:"source,omitempty"`
	// Destination schema
	Destination *SheetConfig `json:"destination,omitempty" url:"destination,omitempty"`
	// ID of the family to add the program to
	FamilyId *FamilyId `json:"familyId,omitempty" url:"familyId,omitempty"`
	// Namespace of the program
	Namespace *string `json:"namespace,omitempty" url:"namespace,omitempty"`
	// Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.
	Save *bool `json:"save,omitempty" url:"save,omitempty"`

	_rawJSON json.RawMessage
}

func (p *ProgramConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ProgramConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProgramConfig(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProgramConfig) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProgramResponse struct {
	Data *Program `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *ProgramResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProgramResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProgramResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProgramResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProgramsResponse struct {
	Data []*Program `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *ProgramsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProgramsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProgramsResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProgramsResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdateMappingRulesRequest = []*MappingRule
