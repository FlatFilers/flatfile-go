// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
	time "time"
)

type ListFilesRequest struct {
	SpaceId *string `json:"-" url:"spaceId,omitempty"`
	// Number of files to return in a page (default 20)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of files to return
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// The storage mode of file to fetch, defaults to "import"
	Mode *Mode `json:"-" url:"mode,omitempty"`
}

// Any uploaded file of any type
type File struct {
	Id FileId `json:"id" url:"id"`
	// Original filename
	Name string `json:"name" url:"name"`
	// Extension of the file
	Ext string `json:"ext" url:"ext"`
	// MIME Type of the file
	Mimetype string `json:"mimetype" url:"mimetype"`
	// Text encoding of the file
	Encoding string `json:"encoding" url:"encoding"`
	// Status of the file
	Status ModelFileStatusEnum `json:"status" url:"status"`
	// The storage mode of file
	Mode *Mode `json:"mode,omitempty" url:"mode,omitempty"`
	// Size of file in bytes
	Size int `json:"size" url:"size"`
	// Number of bytes that have been uploaded so far (useful for progress tracking)
	BytesReceived int `json:"bytesReceived" url:"bytesReceived"`
	// Date the file was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// Date the file was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`
	// Date the file was expired
	ExpiredAt  *time.Time  `json:"expiredAt,omitempty" url:"expiredAt,omitempty"`
	SpaceId    SpaceId     `json:"spaceId" url:"spaceId"`
	WorkbookId *WorkbookId `json:"workbookId,omitempty" url:"workbookId,omitempty"`
	SheetId    *SheetId    `json:"sheetId,omitempty" url:"sheetId,omitempty"`
	Actions    []*Action   `json:"actions,omitempty" url:"actions,omitempty"`
	Origin     *FileOrigin `json:"origin,omitempty" url:"origin,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *File) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *File) UnmarshalJSON(data []byte) error {
	type embed File
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"createdAt"`
		UpdatedAt *core.DateTime `json:"updatedAt"`
		ExpiredAt *core.DateTime `json:"expiredAt,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = File(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	f.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *File) MarshalJSON() ([]byte, error) {
	type embed File
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"createdAt"`
		UpdatedAt *core.DateTime `json:"updatedAt"`
		ExpiredAt *core.DateTime `json:"expiredAt,omitempty"`
	}{
		embed:     embed(*f),
		CreatedAt: core.NewDateTime(f.CreatedAt),
		UpdatedAt: core.NewDateTime(f.UpdatedAt),
		ExpiredAt: core.NewOptionalDateTime(f.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (f *File) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileOrigin string

const (
	FileOriginFilesystem  FileOrigin = "filesystem"
	FileOriginGoogledrive FileOrigin = "googledrive"
	FileOriginBox         FileOrigin = "box"
	FileOriginOnedrive    FileOrigin = "onedrive"
)

func NewFileOriginFromString(s string) (FileOrigin, error) {
	switch s {
	case "filesystem":
		return FileOriginFilesystem, nil
	case "googledrive":
		return FileOriginGoogledrive, nil
	case "box":
		return FileOriginBox, nil
	case "onedrive":
		return FileOriginOnedrive, nil
	}
	var t FileOrigin
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileOrigin) Ptr() *FileOrigin {
	return &f
}

type FileResponse struct {
	Data *File `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FileResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FileResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type ListFilesResponse struct {
	Pagination *Pagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*File     `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFilesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFilesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFilesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFilesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFilesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Mode string

const (
	ModeImport Mode = "import"
	ModeExport Mode = "export"
)

func NewModeFromString(s string) (Mode, error) {
	switch s {
	case "import":
		return ModeImport, nil
	case "export":
		return ModeExport, nil
	}
	var t Mode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Mode) Ptr() *Mode {
	return &m
}

type ModelFileStatusEnum string

const (
	ModelFileStatusEnumPartial  ModelFileStatusEnum = "partial"
	ModelFileStatusEnumComplete ModelFileStatusEnum = "complete"
	ModelFileStatusEnumArchived ModelFileStatusEnum = "archived"
	ModelFileStatusEnumPurged   ModelFileStatusEnum = "purged"
	ModelFileStatusEnumFailed   ModelFileStatusEnum = "failed"
)

func NewModelFileStatusEnumFromString(s string) (ModelFileStatusEnum, error) {
	switch s {
	case "partial":
		return ModelFileStatusEnumPartial, nil
	case "complete":
		return ModelFileStatusEnumComplete, nil
	case "archived":
		return ModelFileStatusEnumArchived, nil
	case "purged":
		return ModelFileStatusEnumPurged, nil
	case "failed":
		return ModelFileStatusEnumFailed, nil
	}
	var t ModelFileStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m ModelFileStatusEnum) Ptr() *ModelFileStatusEnum {
	return &m
}

type UpdateFileRequest struct {
	WorkbookId *WorkbookId `json:"workbookId,omitempty" url:"-"`
	// The name of the file
	Name *string `json:"name,omitempty" url:"-"`
	// The storage mode of file to update
	Mode *Mode `json:"mode,omitempty" url:"-"`
	// Status of the file
	Status *ModelFileStatusEnum `json:"status,omitempty" url:"-"`
	// The actions attached to the file
	Actions []*Action `json:"actions,omitempty" url:"-"`
}

type CreateFileRequest struct {
	SpaceId       SpaceId       `json:"spaceId" url:"-"`
	EnvironmentId EnvironmentId `json:"environmentId" url:"-"`
	// The storage mode of file to insert, defaults to "import"
	Mode *Mode `json:"mode,omitempty" url:"-"`
	// The actions attached to the file
	Actions []*Action `json:"actions,omitempty" url:"-"`
	// The origin of the file, ie filesystem
	Origin *FileOrigin `json:"origin,omitempty" url:"-"`
}
