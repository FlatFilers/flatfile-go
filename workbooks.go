// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type DeleteRecordsRequestDeprecated struct {
	// The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
	Ids []*RecordId `json:"-"`
}

type ListRecordsRequest struct {
	VersionId      *VersionId     `json:"-"`
	UntilVersionId *VersionId     `json:"-"`
	SinceVersionId *VersionId     `json:"-"`
	SortField      *SortField     `json:"-"`
	SortDirection  *SortDirection `json:"-"`
	Filter         *Filter        `json:"-"`
	FilterField    *FilterField   `json:"-"`
	SearchValue    *SearchValue   `json:"-"`
	SearchField    *SearchField   `json:"-"`
	// Number of records to return in a page (default 1000 if pageNumber included)
	PageSize *int `json:"-"`
	// Based on pageSize, which page of records to return
	PageNumber *int `json:"-"`
	// Include counts for the total records, valid records and records with errors
	IncludeCounts *bool `json:"-"`
	// If true, linked records will be included in the results. Defaults to false
	IncludeLinks *bool `json:"-"`
	// Include error messages, defaults to false
	IncludeMessages *bool `json:"-"`
}

type ListWorkbooksRequest struct {
	SpaceId *SpaceId `json:"-"`
	// Include counts for the workbook
	IncludeCounts *bool `json:"-"`
}

// Properties used to create a new Workbook
type CreateWorkbookConfig struct {
	Name          string                  `json:"name"`
	Labels        []string                `json:"labels,omitempty"`
	SpaceId       *SpaceId                `json:"spaceId,omitempty"`
	EnvironmentId *EnvironmentId          `json:"environmentId,omitempty"`
	Namespace     *string                 `json:"namespace,omitempty"`
	Sheets        []*SheetConfig          `json:"sheets,omitempty"`
	Actions       []*Action               `json:"actions,omitempty"`
	Settings      *WorkbookConfigSettings `json:"settings,omitempty"`
	// Metadata for the workbook
	Metadata interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateWorkbookConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWorkbookConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWorkbookConfig(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWorkbookConfig) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListWorkbooksResponse struct {
	Data []*Workbook `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListWorkbooksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWorkbooksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWorkbooksResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWorkbooksResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type WorkbookResponse struct {
	Data *Workbook `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkbookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkbookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkbookResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkbookResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The updates to be made to an existing workbook
type WorkbookUpdate struct {
	Name          *string                `json:"name,omitempty"`
	Labels        []string               `json:"labels,omitempty"`
	SpaceId       *SpaceId               `json:"spaceId,omitempty"`
	EnvironmentId *EnvironmentId         `json:"environmentId,omitempty"`
	Namespace     *string                `json:"namespace,omitempty"`
	Sheets        []*SheetConfigOrUpdate `json:"sheets,omitempty"`
	Actions       []*Action              `json:"actions,omitempty"`
	// Metadata for the workbook
	Metadata interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkbookUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkbookUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkbookUpdate(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkbookUpdate) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
