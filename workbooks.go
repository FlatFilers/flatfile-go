// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type ListWorkbookCommitsRequest struct {
	// If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.
	Completed *bool `json:"-" url:"completed,omitempty"`
}

type ListWorkbooksRequest struct {
	// The associated Space ID of the Workbook.
	SpaceId *SpaceId `json:"-" url:"spaceId,omitempty"`
	// Include counts for the workbook. **DEPRECATED** Counts will return 0s. Use GET /sheets/:sheetId/counts
	IncludeCounts *bool `json:"-" url:"includeCounts,omitempty"`
}

// Properties used to create a new Workbook
type CreateWorkbookConfig struct {
	// The name of the Workbook.
	Name string `json:"name" url:"name"`
	// An optional list of labels for the Workbook.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// Space to associate with the Workbook.
	SpaceId *SpaceId `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	// Environment to associate with the Workbook
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// Optional namespace to apply to the Workbook.
	Namespace *string `json:"namespace,omitempty" url:"namespace,omitempty"`
	// Sheets to create on the Workbook.
	Sheets []*SheetConfig `json:"sheets,omitempty" url:"sheets,omitempty"`
	// Actions to create on the Workbook.
	Actions []*Action `json:"actions,omitempty" url:"actions,omitempty"`
	// The Workbook settings.
	Settings *WorkbookConfigSettings `json:"settings,omitempty" url:"settings,omitempty"`
	// Metadata for the workbook
	Metadata interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateWorkbookConfig) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateWorkbookConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWorkbookConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWorkbookConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWorkbookConfig) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListWorkbooksResponse struct {
	Data []*Workbook `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListWorkbooksResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWorkbooksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWorkbooksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWorkbooksResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWorkbooksResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type WorkbookResponse struct {
	Data *Workbook `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkbookResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkbookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkbookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkbookResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkbookResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The updates to be made to an existing workbook
type WorkbookUpdate struct {
	// The name of the Workbook.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// An optional list of labels for the Workbook.
	Labels []string `json:"labels,omitempty" url:"labels,omitempty"`
	// The Space Id associated with the Workbook.
	SpaceId *SpaceId `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	// The Environment Id associated with the Workbook.
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// The namespace of the Workbook.
	Namespace *string `json:"namespace,omitempty" url:"namespace,omitempty"`
	// Describes shape of data as well as behavior
	Sheets  []*SheetConfigOrUpdate `json:"sheets,omitempty" url:"sheets,omitempty"`
	Actions []*Action              `json:"actions,omitempty" url:"actions,omitempty"`
	// Metadata for the workbook
	Metadata interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkbookUpdate) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkbookUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkbookUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkbookUpdate(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkbookUpdate) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
