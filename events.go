// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
	time "time"
)

type GetEventTokenRequest struct {
	// The resource ID of the event stream (space or environment id)
	Scope *string `json:"-"`
	// The space ID of the event stream
	SpaceId *SpaceId `json:"-"`
}

type ListEventsRequest struct {
	// Filter by environment
	EnvironmentId *EnvironmentId `json:"-"`
	// Filter by space
	SpaceId *SpaceId `json:"-"`
	// Filter by event domain
	Domain *string `json:"-"`
	// Filter by event topic
	Topic *string `json:"-"`
	// Filter by event timestamp
	Since *time.Time `json:"-"`
	// Number of results to return in a page (default 10)
	PageSize *int `json:"-"`
	// Based on pageSize, which page of results to return
	PageNumber *int `json:"-"`
	// Include acknowledged events
	IncludeAcknowledged *bool `json:"-"`
}

// Properties used to create a new event
type CreateEventConfig struct {
	// The domain of the event
	Domain Domain `json:"domain,omitempty"`
	// The context of the event
	Context *Context `json:"context,omitempty"`
	// The attributes of the event
	Attributes *EventAttributes `json:"attributes,omitempty"`
	// The callback url to acknowledge the event
	CallbackUrl *string `json:"callbackUrl,omitempty"`
	// The url to retrieve the data associated with the event
	DataUrl    *string                `json:"dataUrl,omitempty"`
	Target     *string                `json:"target,omitempty"`
	Origin     *Origin                `json:"origin,omitempty"`
	Namespaces []string               `json:"namespaces,omitempty"`
	Topic      EventTopic             `json:"topic,omitempty"`
	Payload    map[string]interface{} `json:"payload,omitempty"`
	// Date the event was deleted
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateEventConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEventConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEventConfig(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventConfig) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
