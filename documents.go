// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

// Document ID
type DocumentId = string

type DocumentConfig struct {
	Title string `json:"title" url:"title"`
	Body  string `json:"body" url:"body"`
	// Certain treatments will cause your Document to look or behave differently.
	Treatments []string  `json:"treatments,omitempty" url:"treatments,omitempty"`
	Actions    []*Action `json:"actions,omitempty" url:"actions,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentConfig(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentConfig) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentResponse struct {
	Data *Document `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListDocumentsResponse struct {
	Data []*Document `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListDocumentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDocumentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDocumentsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDocumentsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
