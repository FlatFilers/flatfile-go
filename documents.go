// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
	time "time"
)

// A document (markdown components) belong to a space
type Document struct {
	Title string `json:"title" url:"title"`
	Body  string `json:"body" url:"body"`
	// Certain treatments will cause your Document to look or behave differently.
	Treatments    []string       `json:"treatments,omitempty" url:"treatments,omitempty"`
	Actions       []*Action      `json:"actions,omitempty" url:"actions,omitempty"`
	Id            DocumentId     `json:"id" url:"id"`
	SpaceId       *SpaceId       `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// Date the document was created
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	// Date the document was last updated
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Document) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *Document) GetBody() string {
	if d == nil {
		return ""
	}
	return d.Body
}

func (d *Document) GetTreatments() []string {
	if d == nil {
		return nil
	}
	return d.Treatments
}

func (d *Document) GetActions() []*Action {
	if d == nil {
		return nil
	}
	return d.Actions
}

func (d *Document) GetId() DocumentId {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *Document) GetSpaceId() *SpaceId {
	if d == nil {
		return nil
	}
	return d.SpaceId
}

func (d *Document) GetEnvironmentId() *EnvironmentId {
	if d == nil {
		return nil
	}
	return d.EnvironmentId
}

func (d *Document) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *Document) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

func (d *Document) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Document) UnmarshalJSON(data []byte) error {
	type embed Document
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Document(unmarshaler.embed)
	d.CreatedAt = unmarshaler.CreatedAt.Time()
	d.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Document) MarshalJSON() ([]byte, error) {
	type embed Document
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*d),
		CreatedAt: internal.NewDateTime(d.CreatedAt),
		UpdatedAt: internal.NewDateTime(d.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *Document) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentConfig struct {
	Title string `json:"title" url:"title"`
	Body  string `json:"body" url:"body"`
	// Certain treatments will cause your Document to look or behave differently.
	Treatments []string  `json:"treatments,omitempty" url:"treatments,omitempty"`
	Actions    []*Action `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentConfig) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *DocumentConfig) GetBody() string {
	if d == nil {
		return ""
	}
	return d.Body
}

func (d *DocumentConfig) GetTreatments() []string {
	if d == nil {
		return nil
	}
	return d.Treatments
}

func (d *DocumentConfig) GetActions() []*Action {
	if d == nil {
		return nil
	}
	return d.Actions
}

func (d *DocumentConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentResponse struct {
	Data *Document `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentResponse) GetData() *Document {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DocumentResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListDocumentsResponse struct {
	Data []*Document `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDocumentsResponse) GetData() []*Document {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListDocumentsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDocumentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDocumentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDocumentsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDocumentsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
