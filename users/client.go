// This file was auto-generated by Fern from our API Definition.

package users

import (
	context "context"
	fmt "fmt"
	flatfilego "github.com/FlatFilers/flatfile-go"
	core "github.com/FlatFilers/flatfile-go/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Gets a list of users
func (c *Client) List(ctx context.Context, request *flatfilego.ListUsersRequest) (*flatfilego.ListUsersResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "users"

	queryParams := make(url.Values)
	if request.Email != nil {
		queryParams.Add("email", fmt.Sprintf("%v", *request.Email))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *flatfilego.ListUsersResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets a user
//
// The user id
func (c *Client) Get(ctx context.Context, userId flatfilego.UserId) (*flatfilego.UserResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v", userId)

	var response *flatfilego.UserResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets all the api tokens for a user.
//
// The user id
func (c *Client) ListApiTokens(ctx context.Context, userId flatfilego.UserId, request *flatfilego.ListApiTokensRequest) (*flatfilego.ListApiTokensResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/api-token", userId)

	queryParams := make(url.Values)
	queryParams.Add("tenantId", fmt.Sprintf("%v", request.TenantId))
	if request.PageSize != nil {
		queryParams.Add("pageSize", fmt.Sprintf("%v", *request.PageSize))
	}
	if request.PageNumber != nil {
		queryParams.Add("pageNumber", fmt.Sprintf("%v", *request.PageNumber))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *flatfilego.ListApiTokensResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates an api token for authenticating against Flatfile APIs.
//
// The user id
func (c *Client) CreateApiToken(ctx context.Context, userId flatfilego.UserId, request *flatfilego.CreateApiTokenRequest) (*flatfilego.ApiTokenResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/api-token", userId)

	queryParams := make(url.Values)
	queryParams.Add("tenantId", fmt.Sprintf("%v", request.TenantId))
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *flatfilego.ApiTokenResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Exchange an invitation for an access token
func (c *Client) ExchangeToken(ctx context.Context, request *flatfilego.ExchangeTokenRequest) (*flatfilego.ExchangeTokenResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "invitations/exchange"

	var response *flatfilego.ExchangeTokenResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
