// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
	time "time"
)

// An account
type Account struct {
	Id                      AccountId              `json:"id" url:"id"`
	Name                    string                 `json:"name" url:"name"`
	Subdomain               *string                `json:"subdomain,omitempty" url:"subdomain,omitempty"`
	VanityDomainDashboard   *string                `json:"vanityDomainDashboard,omitempty" url:"vanityDomainDashboard,omitempty"`
	VanityDomainSpaces      *string                `json:"vanityDomainSpaces,omitempty" url:"vanityDomainSpaces,omitempty"`
	EmbeddedDomainWhitelist []string               `json:"embeddedDomainWhitelist,omitempty" url:"embeddedDomainWhitelist,omitempty"`
	CustomFromEmail         *string                `json:"customFromEmail,omitempty" url:"customFromEmail,omitempty"`
	StripeCustomerId        *string                `json:"stripeCustomerId,omitempty" url:"stripeCustomerId,omitempty"`
	Metadata                map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	CreatedAt               time.Time              `json:"createdAt" url:"createdAt"`
	UpdatedAt               time.Time              `json:"updatedAt" url:"updatedAt"`
	DefaultAppId            *AppId                 `json:"defaultAppId,omitempty" url:"defaultAppId,omitempty"`
	Dashboard               *int                   `json:"dashboard,omitempty" url:"dashboard,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Account) GetId() AccountId {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *Account) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *Account) GetSubdomain() *string {
	if a == nil {
		return nil
	}
	return a.Subdomain
}

func (a *Account) GetVanityDomainDashboard() *string {
	if a == nil {
		return nil
	}
	return a.VanityDomainDashboard
}

func (a *Account) GetVanityDomainSpaces() *string {
	if a == nil {
		return nil
	}
	return a.VanityDomainSpaces
}

func (a *Account) GetEmbeddedDomainWhitelist() []string {
	if a == nil {
		return nil
	}
	return a.EmbeddedDomainWhitelist
}

func (a *Account) GetCustomFromEmail() *string {
	if a == nil {
		return nil
	}
	return a.CustomFromEmail
}

func (a *Account) GetStripeCustomerId() *string {
	if a == nil {
		return nil
	}
	return a.StripeCustomerId
}

func (a *Account) GetMetadata() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *Account) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *Account) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

func (a *Account) GetDefaultAppId() *AppId {
	if a == nil {
		return nil
	}
	return a.DefaultAppId
}

func (a *Account) GetDashboard() *int {
	if a == nil {
		return nil
	}
	return a.Dashboard
}

func (a *Account) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Account) UnmarshalJSON(data []byte) error {
	type embed Account
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Account(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Account) MarshalJSON() ([]byte, error) {
	type embed Account
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewDateTime(a.CreatedAt),
		UpdatedAt: internal.NewDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *Account) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Properties used to update an account
type AccountPatch struct {
	DefaultAppId AppId `json:"defaultAppId" url:"defaultAppId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountPatch) GetDefaultAppId() AppId {
	if a == nil {
		return ""
	}
	return a.DefaultAppId
}

func (a *AccountPatch) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountPatch) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountPatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountPatch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountPatch) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountResponse struct {
	Data *Account `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountResponse) GetData() *Account {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
