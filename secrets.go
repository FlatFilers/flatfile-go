// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type ListSecrets struct {
	// The Environment of the secret.
	EnvironmentId EnvironmentId `json:"-"`
	// The Space of the secret.
	SpaceId *SpaceId `json:"-"`
}

// Secret ID
type SecretId = string

type SecretsResponse struct {
	Data []*Secret `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SecretsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretsResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretsResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The properties required to write to a secret. Value is the only mutable property. Name, environmentId, spaceId (optional) are used for finding the secret.
type WriteSecret struct {
	// The reference name for a secret.
	Name SecretName `json:"name"`
	// The secret value. This is hidden in the UI.
	Value SecretValue `json:"value"`
	// The Environment of the secret.
	EnvironmentId EnvironmentId `json:"environmentId"`
	// The Space of the secret.
	SpaceId *SpaceId `json:"spaceId,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WriteSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler WriteSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WriteSecret(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WriteSecret) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
