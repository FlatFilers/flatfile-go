// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
)

type ListSecrets struct {
	// The Environment of the secret.
	EnvironmentId *EnvironmentId `json:"-" url:"environmentId,omitempty"`
	// The Space of the secret.
	SpaceId *SpaceId `json:"-" url:"spaceId,omitempty"`
	// The Actor of the secret.
	ActorId *ActorIdUnion `json:"-" url:"actorId,omitempty"`
}

// The value of a secret
type Secret struct {
	// The reference name for a secret.
	Name SecretName `json:"name" url:"name"`
	// The secret value. This is hidden in the UI.
	Value SecretValue `json:"value" url:"value"`
	// The Environment of the secret.
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// The Space of the secret.
	SpaceId *SpaceId `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	// The Actor of the secret.
	ActorId *ActorIdUnion `json:"actorId,omitempty" url:"actorId,omitempty"`
	// The ID of the secret.
	Id SecretId `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Secret) GetName() SecretName {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *Secret) GetValue() SecretValue {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *Secret) GetEnvironmentId() *EnvironmentId {
	if s == nil {
		return nil
	}
	return s.EnvironmentId
}

func (s *Secret) GetSpaceId() *SpaceId {
	if s == nil {
		return nil
	}
	return s.SpaceId
}

func (s *Secret) GetActorId() *ActorIdUnion {
	if s == nil {
		return nil
	}
	return s.ActorId
}

func (s *Secret) GetId() SecretId {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *Secret) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Secret) UnmarshalJSON(data []byte) error {
	type unmarshaler Secret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Secret(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Secret) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The name of a secret. Minimum 1 character, maximum 1024
type SecretName = string

// The value of a secret. Minimum 1 character, maximum 1024
type SecretValue = string

type SecretsResponse struct {
	Data []*Secret `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretsResponse) GetData() []*Secret {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SecretsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretsResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The properties required to write to a secret. Value is the only mutable property. Name, environmentId, spaceId (optional) are used for finding the secret.
type WriteSecret struct {
	// The reference name for a secret.
	Name SecretName `json:"name" url:"name"`
	// The secret value. This is hidden in the UI.
	Value SecretValue `json:"value" url:"value"`
	// The Environment of the secret.
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// The Space of the secret.
	SpaceId *SpaceId `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	// The Actor of the secret.
	ActorId *ActorIdUnion `json:"actorId,omitempty" url:"actorId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WriteSecret) GetName() SecretName {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *WriteSecret) GetValue() SecretValue {
	if w == nil {
		return ""
	}
	return w.Value
}

func (w *WriteSecret) GetEnvironmentId() *EnvironmentId {
	if w == nil {
		return nil
	}
	return w.EnvironmentId
}

func (w *WriteSecret) GetSpaceId() *SpaceId {
	if w == nil {
		return nil
	}
	return w.SpaceId
}

func (w *WriteSecret) GetActorId() *ActorIdUnion {
	if w == nil {
		return nil
	}
	return w.ActorId
}

func (w *WriteSecret) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WriteSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler WriteSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WriteSecret(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WriteSecret) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
