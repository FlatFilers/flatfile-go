// This file was auto-generated by Fern from our API Definition.

package cells

import (
	context "context"
	fmt "fmt"
	flatfilego "github.com/FlatFilers/flatfile-go"
	core "github.com/FlatFilers/flatfile-go/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Returns record cell values grouped by all fields in the sheet
//
// ID of sheet
func (c *Client) GetValues(ctx context.Context, sheetId flatfilego.SheetId, request *flatfilego.GetFieldValuesRequest) (*flatfilego.CellsResponse, error) {
	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"sheets/%v/cells", sheetId)

	queryParams := make(url.Values)
	if request.FieldKey != nil {
		queryParams.Add("fieldKey", fmt.Sprintf("%v", request.FieldKey))
	}
	if request.SortField != nil {
		queryParams.Add("sortField", fmt.Sprintf("%v", request.SortField))
	}
	if request.SortDirection != nil {
		queryParams.Add("sortDirection", fmt.Sprintf("%v", request.SortDirection))
	}
	if request.Filter != nil {
		queryParams.Add("filter", fmt.Sprintf("%v", request.Filter))
	}
	if request.FilterField != nil {
		queryParams.Add("filterField", fmt.Sprintf("%v", request.FilterField))
	}
	if request.PageSize != nil {
		queryParams.Add("pageSize", fmt.Sprintf("%v", request.PageSize))
	}
	if request.PageNumber != nil {
		queryParams.Add("pageNumber", fmt.Sprintf("%v", request.PageNumber))
	}
	if request.Distinct != nil {
		queryParams.Add("distinct", fmt.Sprintf("%v", request.Distinct))
	}
	if request.IncludeCounts != nil {
		queryParams.Add("includeCounts", fmt.Sprintf("%v", request.IncludeCounts))
	}
	if request.SearchValue != nil {
		queryParams.Add("searchValue", fmt.Sprintf("%v", request.SearchValue))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *flatfilego.CellsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
