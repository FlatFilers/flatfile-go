// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type DeleteRecordsRequest struct {
	// A list of record IDs to delete. Maximum of 100 allowed.
	Ids []RecordId `json:"-" url:"ids"`
}

type FindAndReplaceRecordRequest struct {
	Filter *Filter `json:"-" url:"filter,omitempty"`
	// Name of field by which to filter records
	FilterField *FilterField `json:"-" url:"filterField,omitempty"`
	SearchValue *SearchValue `json:"-" url:"searchValue,omitempty"`
	SearchField *SearchField `json:"-" url:"searchField,omitempty"`
	// The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
	Ids []*RecordId `json:"-" url:"ids,omitempty"`
	// An FFQL query used to filter the result set
	Q *string `json:"-" url:"q,omitempty"`
	// A value to find for a given field in a sheet. For exact matches, wrap the value in double quotes ("Bob")
	Find *CellValueUnion `json:"find,omitempty" url:"-"`
	// The value to replace found values with
	Replace *CellValueUnion `json:"replace,omitempty" url:"-"`
	// A unique key used to identify a field in a sheet
	FieldKey string `json:"fieldKey" url:"-"`
}

type GetRecordsRequest struct {
	// Deprecated, use `commitId` instead.
	VersionId *VersionId `json:"-" url:"versionId,omitempty"`
	CommitId  *CommitId  `json:"-" url:"commitId,omitempty"`
	// Deprecated, use `sinceCommitId` instead.
	SinceVersionId *VersionId     `json:"-" url:"sinceVersionId,omitempty"`
	SinceCommitId  *CommitId      `json:"-" url:"sinceCommitId,omitempty"`
	SortField      *SortField     `json:"-" url:"sortField,omitempty"`
	SortDirection  *SortDirection `json:"-" url:"sortDirection,omitempty"`
	Filter         *Filter        `json:"-" url:"filter,omitempty"`
	// Name of field by which to filter records
	FilterField *FilterField `json:"-" url:"filterField,omitempty"`
	SearchValue *SearchValue `json:"-" url:"searchValue,omitempty"`
	SearchField *SearchField `json:"-" url:"searchField,omitempty"`
	// The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records. Maximum of 100 allowed.
	Ids []*RecordId `json:"-" url:"ids,omitempty"`
	// Number of records to return in a page (default 10,000)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of records to return (Note - numbers start at 1)
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
	// **DEPRECATED** Use GET /sheets/:sheetId/counts
	IncludeCounts *bool `json:"-" url:"includeCounts,omitempty"`
	// The length of the record result set, returned as counts.total
	IncludeLength *bool `json:"-" url:"includeLength,omitempty"`
	// If true, linked records will be included in the results. Defaults to false.
	IncludeLinks *bool `json:"-" url:"includeLinks,omitempty"`
	// Include error messages, defaults to false.
	IncludeMessages *bool `json:"-" url:"includeMessages,omitempty"`
	// A list of field keys to include in the response. If not provided, all fields will be included.
	Fields []*string `json:"-" url:"fields,omitempty"`
	// if "for" is provided, the query parameters will be pulled from the event payload
	For *EventId `json:"-" url:"for,omitempty"`
	// An FFQL query used to filter the result set
	Q *string `json:"-" url:"q,omitempty"`
}

type GetRecordIndicesRequest struct {
	CommitId      *CommitId      `json:"-" url:"commitId,omitempty"`
	SinceCommitId *CommitId      `json:"-" url:"sinceCommitId,omitempty"`
	SortField     *SortField     `json:"-" url:"sortField,omitempty"`
	SortDirection *SortDirection `json:"-" url:"sortDirection,omitempty"`
	Filter        *Filter        `json:"-" url:"filter,omitempty"`
	// Name of field by which to filter records
	FilterField *FilterField `json:"-" url:"filterField,omitempty"`
	SearchValue *SearchValue `json:"-" url:"searchValue,omitempty"`
	SearchField *SearchField `json:"-" url:"searchField,omitempty"`
	// List of record IDs to include in the query. Limit 100.
	Ids []RecordId `json:"-" url:"ids"`
	// An FFQL query used to filter the result set
	Q *string `json:"-" url:"q,omitempty"`
}

type GetRecordIndicesResponse = []*RecordIndices

type GetRecordsResponse struct {
	Data *GetRecordsResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetRecordsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetRecordsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetRecordsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetRecordsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetRecordsResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A list of records with optional record counts
type GetRecordsResponseData struct {
	Success bool             `json:"success" url:"success"`
	Records RecordsWithLinks `json:"records,omitempty" url:"records,omitempty"`
	Counts  *RecordCounts    `json:"counts,omitempty" url:"counts,omitempty"`
	// Deprecated, use `commitId` instead.
	VersionId *VersionId `json:"versionId,omitempty" url:"versionId,omitempty"`
	CommitId  *CommitId  `json:"commitId,omitempty" url:"commitId,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetRecordsResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetRecordsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler GetRecordsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetRecordsResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetRecordsResponseData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A record index object
type RecordIndices struct {
	Id    string `json:"id" url:"id"`
	Index int    `json:"index" url:"index"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RecordIndices) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecordIndices) UnmarshalJSON(data []byte) error {
	type unmarshaler RecordIndices
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecordIndices(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecordIndices) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
