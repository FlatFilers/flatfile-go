// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type GetRecordCountsRequest struct {
	VersionId      *string    `json:"-"`
	SinceVersionId *VersionId `json:"-"`
	// Options to filter records
	Filter      *Filter      `json:"-"`
	FilterField *FilterField `json:"-"`
	SearchValue *SearchValue `json:"-"`
	SearchField *SearchField `json:"-"`
	// If true, the error counts for each field will also be returned
	ByField *bool `json:"-"`
	// An FFQL query used to filter the result set to be counted
	Q *string `json:"-"`
}

type GetRecordsCsvRequest struct {
	VersionId      *string    `json:"-"`
	SinceVersionId *VersionId `json:"-"`
	SortField      *SortField `json:"-"`
	// Sort direction - asc (ascending) or desc (descending)
	SortDirection *SortDirection `json:"-"`
	// Options to filter records
	Filter      *Filter      `json:"-"`
	FilterField *FilterField `json:"-"`
	SearchValue *SearchValue `json:"-"`
	SearchField *SearchField `json:"-"`
	// The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
	Ids []*RecordId `json:"-"`
}

type ListSheetCommitsRequest struct {
	// If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.
	Completed *bool `json:"-"`
}

type ListSheetsRequest struct {
	// ID of workbook
	WorkbookId WorkbookId `json:"-"`
}

type Property struct {
	Type      string
	String    *StringProperty
	Number    *NumberProperty
	Boolean   *BooleanProperty
	Date      *DateProperty
	Enum      *EnumProperty
	Reference *ReferenceProperty
}

func NewPropertyFromString(value *StringProperty) *Property {
	return &Property{Type: "string", String: value}
}

func NewPropertyFromNumber(value *NumberProperty) *Property {
	return &Property{Type: "number", Number: value}
}

func NewPropertyFromBoolean(value *BooleanProperty) *Property {
	return &Property{Type: "boolean", Boolean: value}
}

func NewPropertyFromDate(value *DateProperty) *Property {
	return &Property{Type: "date", Date: value}
}

func NewPropertyFromEnum(value *EnumProperty) *Property {
	return &Property{Type: "enum", Enum: value}
}

func NewPropertyFromReference(value *ReferenceProperty) *Property {
	return &Property{Type: "reference", Reference: value}
}

func (p *Property) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "string":
		value := new(StringProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "number":
		value := new(NumberProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Number = value
	case "boolean":
		value := new(BooleanProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Boolean = value
	case "date":
		value := new(DateProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Date = value
	case "enum":
		value := new(EnumProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Enum = value
	case "reference":
		value := new(ReferenceProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Reference = value
	}
	return nil
}

func (p Property) MarshalJSON() ([]byte, error) {
	switch p.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "string":
		var marshaler = struct {
			Type string `json:"type"`
			*StringProperty
		}{
			Type:           p.Type,
			StringProperty: p.String,
		}
		return json.Marshal(marshaler)
	case "number":
		var marshaler = struct {
			Type string `json:"type"`
			*NumberProperty
		}{
			Type:           p.Type,
			NumberProperty: p.Number,
		}
		return json.Marshal(marshaler)
	case "boolean":
		var marshaler = struct {
			Type string `json:"type"`
			*BooleanProperty
		}{
			Type:            p.Type,
			BooleanProperty: p.Boolean,
		}
		return json.Marshal(marshaler)
	case "date":
		var marshaler = struct {
			Type string `json:"type"`
			*DateProperty
		}{
			Type:         p.Type,
			DateProperty: p.Date,
		}
		return json.Marshal(marshaler)
	case "enum":
		var marshaler = struct {
			Type string `json:"type"`
			*EnumProperty
		}{
			Type:         p.Type,
			EnumProperty: p.Enum,
		}
		return json.Marshal(marshaler)
	case "reference":
		var marshaler = struct {
			Type string `json:"type"`
			*ReferenceProperty
		}{
			Type:              p.Type,
			ReferenceProperty: p.Reference,
		}
		return json.Marshal(marshaler)
	}
}

type PropertyVisitor interface {
	VisitString(*StringProperty) error
	VisitNumber(*NumberProperty) error
	VisitBoolean(*BooleanProperty) error
	VisitDate(*DateProperty) error
	VisitEnum(*EnumProperty) error
	VisitReference(*ReferenceProperty) error
}

func (p *Property) Accept(visitor PropertyVisitor) error {
	switch p.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "string":
		return visitor.VisitString(p.String)
	case "number":
		return visitor.VisitNumber(p.Number)
	case "boolean":
		return visitor.VisitBoolean(p.Boolean)
	case "date":
		return visitor.VisitDate(p.Date)
	case "enum":
		return visitor.VisitEnum(p.Enum)
	case "reference":
		return visitor.VisitReference(p.Reference)
	}
}

type RecordCountsResponse struct {
	Data *RecordCountsResponseData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecordCountsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecordCountsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecordCountsResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecordCountsResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SheetResponse struct {
	Data *Sheet `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SheetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SheetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SheetResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SheetResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
