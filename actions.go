// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
	time "time"
)

type ActionResponse = *ApiAction

type Actions = []*Action

type ActionsResponse = []*ApiAction

type ApiAction struct {
	// **This is deprecated. Use `operation` instead.**
	Slug *string `json:"slug,omitempty" url:"slug,omitempty"`
	// This will become the job operation that is triggered
	Operation *string `json:"operation,omitempty" url:"operation,omitempty"`
	// Foreground and toolbarBlocking action mode will prevent interacting with the resource until complete
	Mode *ActionMode `json:"mode,omitempty" url:"mode,omitempty"`
	// A tooltip that appears when hovering the action button
	Tooltip  *string          `json:"tooltip,omitempty" url:"tooltip,omitempty"`
	Messages []*ActionMessage `json:"messages,omitempty" url:"messages,omitempty"`
	// **This is deprecated.**
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The text that appears in the dialog after the action is clicked.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Determines if the action should happen on a regular cadence.
	Schedule *ActionSchedule `json:"schedule,omitempty" url:"schedule,omitempty"`
	// A primary action will be more visibly present, whether in Sheet or Workbook.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// Whether to show a modal to confirm the action
	Confirm *bool `json:"confirm,omitempty" url:"confirm,omitempty"`
	// Icon will work on primary actions. It will only accept an already existing Flatfile design system icon.
	Icon *string `json:"icon,omitempty" url:"icon,omitempty"`
	// **This is deprecated. Use `constraints` instead.**
	RequireAllValid *bool `json:"requireAllValid,omitempty" url:"requireAllValid,omitempty"`
	// **This is deprecated. Use `constraints` instead.**
	RequireSelection *bool `json:"requireSelection,omitempty" url:"requireSelection,omitempty"`
	// Adds an input form for this action after it is clicked.
	InputForm *InputForm `json:"inputForm,omitempty" url:"inputForm,omitempty"`
	// A limitation or restriction on the action.
	Constraints []*ActionConstraint `json:"constraints,omitempty" url:"constraints,omitempty"`
	Mount       *ActionMount        `json:"mount,omitempty" url:"mount,omitempty"`
	Guide       *Guide              `json:"guide,omitempty" url:"guide,omitempty"`
	Guardrail   *Guardrail          `json:"guardrail,omitempty" url:"guardrail,omitempty"`
	// The text on the Button itself
	Label     string    `json:"label" url:"label"`
	Id        ActionId  `json:"id" url:"id"`
	TargetId  string    `json:"targetId" url:"targetId"`
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ApiAction) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiAction) UnmarshalJSON(data []byte) error {
	type embed ApiAction
	var unmarshaler = struct {
		embed
		UpdatedAt *core.DateTime `json:"updatedAt"`
		CreatedAt *core.DateTime `json:"createdAt"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ApiAction(unmarshaler.embed)
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()
	a.CreatedAt = unmarshaler.CreatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiAction) MarshalJSON() ([]byte, error) {
	type embed ApiAction
	var marshaler = struct {
		embed
		UpdatedAt *core.DateTime `json:"updatedAt"`
		CreatedAt *core.DateTime `json:"createdAt"`
	}{
		embed:     embed(*a),
		UpdatedAt: core.NewDateTime(a.UpdatedAt),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *ApiAction) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionUpdate struct {
	// **This is deprecated. Use `operation` instead.**
	Slug *string `json:"slug,omitempty" url:"slug,omitempty"`
	// This will become the job operation that is triggered
	Operation *string `json:"operation,omitempty" url:"operation,omitempty"`
	// Foreground and toolbarBlocking action mode will prevent interacting with the resource until complete
	Mode *ActionMode `json:"mode,omitempty" url:"mode,omitempty"`
	// A tooltip that appears when hovering the action button
	Tooltip  *string          `json:"tooltip,omitempty" url:"tooltip,omitempty"`
	Messages []*ActionMessage `json:"messages,omitempty" url:"messages,omitempty"`
	// **This is deprecated.**
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The text that appears in the dialog after the action is clicked.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Determines if the action should happen on a regular cadence.
	Schedule *ActionSchedule `json:"schedule,omitempty" url:"schedule,omitempty"`
	// A primary action will be more visibly present, whether in Sheet or Workbook.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// Whether to show a modal to confirm the action
	Confirm *bool `json:"confirm,omitempty" url:"confirm,omitempty"`
	// Icon will work on primary actions. It will only accept an already existing Flatfile design system icon.
	Icon *string `json:"icon,omitempty" url:"icon,omitempty"`
	// **This is deprecated. Use `constraints` instead.**
	RequireAllValid *bool `json:"requireAllValid,omitempty" url:"requireAllValid,omitempty"`
	// **This is deprecated. Use `constraints` instead.**
	RequireSelection *bool `json:"requireSelection,omitempty" url:"requireSelection,omitempty"`
	// Adds an input form for this action after it is clicked.
	InputForm *InputForm `json:"inputForm,omitempty" url:"inputForm,omitempty"`
	// A limitation or restriction on the action.
	Constraints []*ActionConstraint `json:"constraints,omitempty" url:"constraints,omitempty"`
	Mount       *ActionMount        `json:"mount,omitempty" url:"mount,omitempty"`
	Guide       *Guide              `json:"guide,omitempty" url:"guide,omitempty"`
	Guardrail   *Guardrail          `json:"guardrail,omitempty" url:"guardrail,omitempty"`
	Label       *string             `json:"label,omitempty" url:"label,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ActionUpdate) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionUpdate(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionUpdate) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
