// This file was auto-generated by Fern from our API Definition.

package apps

import (
	context "context"
	flatfilego "github.com/FlatFilers/flatfile-go"
	core "github.com/FlatFilers/flatfile-go/core"
	option "github.com/FlatFilers/flatfile-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns apps in an account
func (c *Client) List(
	ctx context.Context,
	opts ...option.RequestOption,
) (*flatfilego.AppsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/apps"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.AppsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns an app
func (c *Client) Get(
	ctx context.Context,
	// ID of app
	appId flatfilego.AppId,
	opts ...option.RequestOption,
) (*flatfilego.AppResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/apps/%v", appId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.AppResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates an app
func (c *Client) Update(
	ctx context.Context,
	// ID of app
	appId flatfilego.AppId,
	request *flatfilego.AppPatch,
	opts ...option.RequestOption,
) (*flatfilego.AppResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/apps/%v", appId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.AppResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates an app
func (c *Client) Create(
	ctx context.Context,
	request *flatfilego.AppCreate,
	opts ...option.RequestOption,
) (*flatfilego.AppResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/apps"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.AppResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes an app
func (c *Client) Delete(
	ctx context.Context,
	// ID of app to delete
	appId flatfilego.AppId,
	opts ...option.RequestOption,
) (*flatfilego.SuccessResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/apps/%v", appId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.SuccessResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns constraints for an app
func (c *Client) GetConstraints(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	request *flatfilego.GetConstraintsRequest,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/apps/%v/constraints", appId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a new constraint for an app
func (c *Client) CreateConstraint(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	request *flatfilego.ConstraintCreate,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/apps/%v/constraints", appId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns a specific constraint
func (c *Client) GetConstraintById(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	// ID of the constraint
	constraintId flatfilego.ConstraintId,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/apps/%v/constraints/%v",
		appId,
		constraintId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns the versions of a specific constraint
func (c *Client) GetConstraintVersions(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	// ID of the constraint
	constraintId flatfilego.ConstraintId,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintVersionsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/apps/%v/constraints/%v/versions",
		appId,
		constraintId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintVersionsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns a specified version of a specific constraint
func (c *Client) GetConstraintVersion(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	// ID of the constraint
	constraintId flatfilego.ConstraintId,
	// Version of the constraint
	version int,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintVersionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/apps/%v/constraints/%v/versions/%v",
		appId,
		constraintId,
		version,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintVersionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a specific constraint
func (c *Client) UpdateConstraint(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	// ID of the constraint
	constraintId flatfilego.ConstraintId,
	request *flatfilego.ConstraintUpdate,
	opts ...option.RequestOption,
) (*flatfilego.ConstraintResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/apps/%v/constraints/%v",
		appId,
		constraintId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.ConstraintResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a specific constraint
func (c *Client) DeleteConstraint(
	ctx context.Context,
	// ID of the app
	appId flatfilego.AppId,
	// ID of the constraint
	constraintId flatfilego.ConstraintId,
	opts ...option.RequestOption,
) (*flatfilego.SuccessResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.x.flatfile.com/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/apps/%v/constraints/%v",
		appId,
		constraintId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *flatfilego.SuccessResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
