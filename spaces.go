// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
	time "time"
)

type DeleteSpacesRequest struct {
	// List of ids for the spaces to be deleted
	Ids []SpaceId `json:"-"`
}

type ListSpacesRequest struct {
	// The ID of the environment.
	EnvironmentId *EnvironmentId `json:"-"`
	// Number of spaces to return in a page (default 10)
	PageSize *int `json:"-"`
	// Based on pageSize, which page of records to return
	PageNumber *int `json:"-"`
	// Search query for spaces
	Search *string `json:"-"`
	// Flag to include archived spaces
	Archived *bool `json:"-"`
	// Field to sort spaces by
	SortField *GetSpacesSortField `json:"-"`
	// Direction of sorting
	SortDirection *SortDirection `json:"-"`
	// Flag for collaborative (project) spaces
	IsCollaborative *bool `json:"-"`
}

type GetSpacesSortField string

const (
	GetSpacesSortFieldName              GetSpacesSortField = "name"
	GetSpacesSortFieldWorkbooksCount    GetSpacesSortField = "workbooksCount"
	GetSpacesSortFieldFilesCount        GetSpacesSortField = "filesCount"
	GetSpacesSortFieldEnvironmentId     GetSpacesSortField = "environmentId"
	GetSpacesSortFieldCreatedByUserName GetSpacesSortField = "createdByUserName"
	GetSpacesSortFieldCreatedAt         GetSpacesSortField = "createdAt"
)

func NewGetSpacesSortFieldFromString(s string) (GetSpacesSortField, error) {
	switch s {
	case "name":
		return GetSpacesSortFieldName, nil
	case "workbooksCount":
		return GetSpacesSortFieldWorkbooksCount, nil
	case "filesCount":
		return GetSpacesSortFieldFilesCount, nil
	case "environmentId":
		return GetSpacesSortFieldEnvironmentId, nil
	case "createdByUserName":
		return GetSpacesSortFieldCreatedByUserName, nil
	case "createdAt":
		return GetSpacesSortFieldCreatedAt, nil
	}
	var t GetSpacesSortField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GetSpacesSortField) Ptr() *GetSpacesSortField {
	return &g
}

// List of Space objects
type ListSpacesResponse struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Data       []*Space    `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListSpacesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSpacesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSpacesResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSpacesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Properties used to create a new Space
type SpaceConfig struct {
	SpaceConfigId     *SpaceConfigId `json:"spaceConfigId,omitempty"`
	EnvironmentId     *EnvironmentId `json:"environmentId,omitempty"`
	PrimaryWorkbookId *WorkbookId    `json:"primaryWorkbookId,omitempty"`
	// Metadata for the space
	Metadata         interface{}   `json:"metadata,omitempty"`
	Actions          []*Action     `json:"actions,omitempty"`
	Access           []SpaceAccess `json:"access,omitempty"`
	AutoConfigure    *bool         `json:"autoConfigure,omitempty"`
	Namespace        *string       `json:"namespace,omitempty"`
	Labels           []string      `json:"labels,omitempty"`
	TranslationsPath *string       `json:"translationsPath,omitempty"`
	LanguageOverride *string       `json:"languageOverride,omitempty"`
	// Date when space was archived
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`
	// The name of the space
	Name *string `json:"name,omitempty"`
	// The display order
	DisplayOrder        *int                      `json:"displayOrder,omitempty"`
	GuestAuthentication []GuestAuthenticationEnum `json:"guestAuthentication,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SpaceConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SpaceConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpaceConfig(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpaceConfig) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SpaceResponse struct {
	Data *Space `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SpaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SpaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpaceResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpaceResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
