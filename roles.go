// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/FlatFilers/flatfile-go/core"
)

type AssignRoleRequest struct {
	// The user, agent, or guest to assign the role to
	ActorId *ActorIdUnion `json:"actorId,omitempty"`
	// The account, environment, or space context for the role assignment
	ResourceId *ResourceIdUnion `json:"resourceId,omitempty"`
}

type ActorIdUnion struct {
	typeName string
	UserId   UserId
	AgentId  AgentId
	GuestId  GuestId
}

func NewActorIdUnionFromUserId(value UserId) *ActorIdUnion {
	return &ActorIdUnion{typeName: "userId", UserId: value}
}

func NewActorIdUnionFromAgentId(value AgentId) *ActorIdUnion {
	return &ActorIdUnion{typeName: "agentId", AgentId: value}
}

func NewActorIdUnionFromGuestId(value GuestId) *ActorIdUnion {
	return &ActorIdUnion{typeName: "guestId", GuestId: value}
}

func (a *ActorIdUnion) UnmarshalJSON(data []byte) error {
	var valueUserId UserId
	if err := json.Unmarshal(data, &valueUserId); err == nil {
		a.typeName = "userId"
		a.UserId = valueUserId
		return nil
	}
	var valueAgentId AgentId
	if err := json.Unmarshal(data, &valueAgentId); err == nil {
		a.typeName = "agentId"
		a.AgentId = valueAgentId
		return nil
	}
	var valueGuestId GuestId
	if err := json.Unmarshal(data, &valueGuestId); err == nil {
		a.typeName = "guestId"
		a.GuestId = valueGuestId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActorIdUnion) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "userId":
		return json.Marshal(a.UserId)
	case "agentId":
		return json.Marshal(a.AgentId)
	case "guestId":
		return json.Marshal(a.GuestId)
	}
}

type ActorIdUnionVisitor interface {
	VisitUserId(UserId) error
	VisitAgentId(AgentId) error
	VisitGuestId(GuestId) error
}

func (a *ActorIdUnion) Accept(visitor ActorIdUnionVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "userId":
		return visitor.VisitUserId(a.UserId)
	case "agentId":
		return visitor.VisitAgentId(a.AgentId)
	case "guestId":
		return visitor.VisitGuestId(a.GuestId)
	}
}

type AssignRoleResponse struct {
	Data *AssignRoleResponseData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AssignRoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AssignRoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssignRoleResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssignRoleResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ResourceIdUnion struct {
	typeName      string
	AccountId     AccountId
	EnvironmentId EnvironmentId
	SpaceId       SpaceId
}

func NewResourceIdUnionFromAccountId(value AccountId) *ResourceIdUnion {
	return &ResourceIdUnion{typeName: "accountId", AccountId: value}
}

func NewResourceIdUnionFromEnvironmentId(value EnvironmentId) *ResourceIdUnion {
	return &ResourceIdUnion{typeName: "environmentId", EnvironmentId: value}
}

func NewResourceIdUnionFromSpaceId(value SpaceId) *ResourceIdUnion {
	return &ResourceIdUnion{typeName: "spaceId", SpaceId: value}
}

func (r *ResourceIdUnion) UnmarshalJSON(data []byte) error {
	var valueAccountId AccountId
	if err := json.Unmarshal(data, &valueAccountId); err == nil {
		r.typeName = "accountId"
		r.AccountId = valueAccountId
		return nil
	}
	var valueEnvironmentId EnvironmentId
	if err := json.Unmarshal(data, &valueEnvironmentId); err == nil {
		r.typeName = "environmentId"
		r.EnvironmentId = valueEnvironmentId
		return nil
	}
	var valueSpaceId SpaceId
	if err := json.Unmarshal(data, &valueSpaceId); err == nil {
		r.typeName = "spaceId"
		r.SpaceId = valueSpaceId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r ResourceIdUnion) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "accountId":
		return json.Marshal(r.AccountId)
	case "environmentId":
		return json.Marshal(r.EnvironmentId)
	case "spaceId":
		return json.Marshal(r.SpaceId)
	}
}

type ResourceIdUnionVisitor interface {
	VisitAccountId(AccountId) error
	VisitEnvironmentId(EnvironmentId) error
	VisitSpaceId(SpaceId) error
}

func (r *ResourceIdUnion) Accept(visitor ResourceIdUnionVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "accountId":
		return visitor.VisitAccountId(r.AccountId)
	case "environmentId":
		return visitor.VisitEnvironmentId(r.EnvironmentId)
	case "spaceId":
		return visitor.VisitSpaceId(r.SpaceId)
	}
}
