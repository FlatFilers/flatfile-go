// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
	time "time"
)

type GetEnvironmentEventTokenRequest struct {
	// ID of environment to return
	EnvironmentId EnvironmentId `json:"-" url:"environmentId"`
}

type ListEnvironmentsRequest struct {
	// Number of environments to return in a page (default 10)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of environments to return
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
}

type Environment struct {
	Id        EnvironmentId `json:"id" url:"id"`
	AccountId AccountId     `json:"accountId" url:"accountId"`
	// The name of the environment
	Name string `json:"name" url:"name"`
	// Whether or not the environment is a production environment
	IsProd              bool                      `json:"isProd" url:"isProd"`
	GuestAuthentication []GuestAuthenticationEnum `json:"guestAuthentication,omitempty" url:"guestAuthentication,omitempty"`
	Features            map[string]interface{}    `json:"features,omitempty" url:"features,omitempty"`
	Metadata            map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	TranslationsPath    *string                   `json:"translationsPath,omitempty" url:"translationsPath,omitempty"`
	Namespaces          []string                  `json:"namespaces,omitempty" url:"namespaces,omitempty"`
	LanguageOverride    *string                   `json:"languageOverride,omitempty" url:"languageOverride,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Environment) GetId() EnvironmentId {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *Environment) GetAccountId() AccountId {
	if e == nil {
		return ""
	}
	return e.AccountId
}

func (e *Environment) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *Environment) GetIsProd() bool {
	if e == nil {
		return false
	}
	return e.IsProd
}

func (e *Environment) GetGuestAuthentication() []GuestAuthenticationEnum {
	if e == nil {
		return nil
	}
	return e.GuestAuthentication
}

func (e *Environment) GetFeatures() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Features
}

func (e *Environment) GetMetadata() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *Environment) GetTranslationsPath() *string {
	if e == nil {
		return nil
	}
	return e.TranslationsPath
}

func (e *Environment) GetNamespaces() []string {
	if e == nil {
		return nil
	}
	return e.Namespaces
}

func (e *Environment) GetLanguageOverride() *string {
	if e == nil {
		return nil
	}
	return e.LanguageOverride
}

func (e *Environment) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Environment) UnmarshalJSON(data []byte) error {
	type unmarshaler Environment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Environment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Environment) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Properties used to create a new environment
type EnvironmentConfigCreate struct {
	// The name of the environment
	Name string `json:"name" url:"name"`
	// Whether or not the environment is a production environment
	IsProd              bool                      `json:"isProd" url:"isProd"`
	GuestAuthentication []GuestAuthenticationEnum `json:"guestAuthentication,omitempty" url:"guestAuthentication,omitempty"`
	Metadata            map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	TranslationsPath    *string                   `json:"translationsPath,omitempty" url:"translationsPath,omitempty"`
	Namespaces          []string                  `json:"namespaces,omitempty" url:"namespaces,omitempty"`
	LanguageOverride    *string                   `json:"languageOverride,omitempty" url:"languageOverride,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvironmentConfigCreate) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EnvironmentConfigCreate) GetIsProd() bool {
	if e == nil {
		return false
	}
	return e.IsProd
}

func (e *EnvironmentConfigCreate) GetGuestAuthentication() []GuestAuthenticationEnum {
	if e == nil {
		return nil
	}
	return e.GuestAuthentication
}

func (e *EnvironmentConfigCreate) GetMetadata() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EnvironmentConfigCreate) GetTranslationsPath() *string {
	if e == nil {
		return nil
	}
	return e.TranslationsPath
}

func (e *EnvironmentConfigCreate) GetNamespaces() []string {
	if e == nil {
		return nil
	}
	return e.Namespaces
}

func (e *EnvironmentConfigCreate) GetLanguageOverride() *string {
	if e == nil {
		return nil
	}
	return e.LanguageOverride
}

func (e *EnvironmentConfigCreate) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvironmentConfigCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvironmentConfigCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvironmentConfigCreate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvironmentConfigCreate) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Properties used to update an environment
type EnvironmentConfigUpdate struct {
	// The name of the environment
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Whether or not the environment is a production environment
	IsProd              *bool                     `json:"isProd,omitempty" url:"isProd,omitempty"`
	GuestAuthentication []GuestAuthenticationEnum `json:"guestAuthentication,omitempty" url:"guestAuthentication,omitempty"`
	Metadata            map[string]interface{}    `json:"metadata,omitempty" url:"metadata,omitempty"`
	TranslationsPath    *string                   `json:"translationsPath,omitempty" url:"translationsPath,omitempty"`
	Namespaces          []string                  `json:"namespaces,omitempty" url:"namespaces,omitempty"`
	LanguageOverride    *string                   `json:"languageOverride,omitempty" url:"languageOverride,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvironmentConfigUpdate) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EnvironmentConfigUpdate) GetIsProd() *bool {
	if e == nil {
		return nil
	}
	return e.IsProd
}

func (e *EnvironmentConfigUpdate) GetGuestAuthentication() []GuestAuthenticationEnum {
	if e == nil {
		return nil
	}
	return e.GuestAuthentication
}

func (e *EnvironmentConfigUpdate) GetMetadata() map[string]interface{} {
	if e == nil {
		return nil
	}
	return e.Metadata
}

func (e *EnvironmentConfigUpdate) GetTranslationsPath() *string {
	if e == nil {
		return nil
	}
	return e.TranslationsPath
}

func (e *EnvironmentConfigUpdate) GetNamespaces() []string {
	if e == nil {
		return nil
	}
	return e.Namespaces
}

func (e *EnvironmentConfigUpdate) GetLanguageOverride() *string {
	if e == nil {
		return nil
	}
	return e.LanguageOverride
}

func (e *EnvironmentConfigUpdate) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvironmentConfigUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvironmentConfigUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvironmentConfigUpdate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvironmentConfigUpdate) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvironmentResponse struct {
	Data *Environment `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvironmentResponse) GetData() *Environment {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EnvironmentResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvironmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvironmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvironmentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvironmentResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Create a guide
type GuideCreateRequest struct {
	Description   string                   `json:"description" url:"description"`
	Title         string                   `json:"title" url:"title"`
	Metadata      map[string]interface{}   `json:"metadata,omitempty" url:"metadata,omitempty"`
	Slug          string                   `json:"slug" url:"slug"`
	Versions      []*GuideVersionResource  `json:"versions,omitempty" url:"versions,omitempty"`
	Blocks        []map[string]interface{} `json:"blocks,omitempty" url:"blocks,omitempty"`
	EnvironmentId string                   `json:"environmentId" url:"environmentId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideCreateRequest) GetDescription() string {
	if g == nil {
		return ""
	}
	return g.Description
}

func (g *GuideCreateRequest) GetTitle() string {
	if g == nil {
		return ""
	}
	return g.Title
}

func (g *GuideCreateRequest) GetMetadata() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GuideCreateRequest) GetSlug() string {
	if g == nil {
		return ""
	}
	return g.Slug
}

func (g *GuideCreateRequest) GetVersions() []*GuideVersionResource {
	if g == nil {
		return nil
	}
	return g.Versions
}

func (g *GuideCreateRequest) GetBlocks() []map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Blocks
}

func (g *GuideCreateRequest) GetEnvironmentId() string {
	if g == nil {
		return ""
	}
	return g.EnvironmentId
}

func (g *GuideCreateRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideCreateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideCreateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideCreateRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GuideDeleteResponse struct {
	Data *GuideDeleteResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideDeleteResponse) GetData() *GuideDeleteResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GuideDeleteResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideDeleteResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GuideDeleteResponseData struct {
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideDeleteResponseData) GetSuccess() bool {
	if g == nil {
		return false
	}
	return g.Success
}

func (g *GuideDeleteResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideDeleteResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideDeleteResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideDeleteResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideDeleteResponseData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GuideDetailResponse struct {
	Data *GuideResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideDetailResponse) GetData() *GuideResource {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GuideDetailResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideDetailResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideDetailResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideDetailResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideDetailResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GuideListResponse struct {
	Data []*GuideResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideListResponse) GetData() []*GuideResource {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GuideListResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideListResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A guide
type GuideResource struct {
	Id          GuideId                  `json:"id" url:"id"`
	Description *string                  `json:"description,omitempty" url:"description,omitempty"`
	Metadata    map[string]interface{}   `json:"metadata,omitempty" url:"metadata,omitempty"`
	Slug        string                   `json:"slug" url:"slug"`
	Title       string                   `json:"title" url:"title"`
	Versions    []*GuideVersionResource  `json:"versions,omitempty" url:"versions,omitempty"`
	Blocks      []map[string]interface{} `json:"blocks,omitempty" url:"blocks,omitempty"`
	CreatedAt   time.Time                `json:"createdAt" url:"createdAt"`
	UpdatedAt   time.Time                `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideResource) GetId() GuideId {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GuideResource) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GuideResource) GetMetadata() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GuideResource) GetSlug() string {
	if g == nil {
		return ""
	}
	return g.Slug
}

func (g *GuideResource) GetTitle() string {
	if g == nil {
		return ""
	}
	return g.Title
}

func (g *GuideResource) GetVersions() []*GuideVersionResource {
	if g == nil {
		return nil
	}
	return g.Versions
}

func (g *GuideResource) GetBlocks() []map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Blocks
}

func (g *GuideResource) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GuideResource) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GuideResource) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideResource) UnmarshalJSON(data []byte) error {
	type embed GuideResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GuideResource(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideResource) MarshalJSON() ([]byte, error) {
	type embed GuideResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GuideResource) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Update a guide
type GuideUpdateRequest struct {
	Description   *string                  `json:"description,omitempty" url:"description,omitempty"`
	Title         *string                  `json:"title,omitempty" url:"title,omitempty"`
	Metadata      map[string]interface{}   `json:"metadata,omitempty" url:"metadata,omitempty"`
	Slug          *string                  `json:"slug,omitempty" url:"slug,omitempty"`
	Versions      []*GuideVersionResource  `json:"versions,omitempty" url:"versions,omitempty"`
	Blocks        []map[string]interface{} `json:"blocks,omitempty" url:"blocks,omitempty"`
	EnvironmentId *string                  `json:"environmentId,omitempty" url:"environmentId,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideUpdateRequest) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GuideUpdateRequest) GetTitle() *string {
	if g == nil {
		return nil
	}
	return g.Title
}

func (g *GuideUpdateRequest) GetMetadata() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GuideUpdateRequest) GetSlug() *string {
	if g == nil {
		return nil
	}
	return g.Slug
}

func (g *GuideUpdateRequest) GetVersions() []*GuideVersionResource {
	if g == nil {
		return nil
	}
	return g.Versions
}

func (g *GuideUpdateRequest) GetBlocks() []map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Blocks
}

func (g *GuideUpdateRequest) GetEnvironmentId() *string {
	if g == nil {
		return nil
	}
	return g.EnvironmentId
}

func (g *GuideUpdateRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideUpdateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideUpdateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideUpdateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideUpdateRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A version of a guide
type GuideVersionResource struct {
	Id        string    `json:"id" url:"id"`
	Version   int       `json:"version" url:"version"`
	Content   string    `json:"content" url:"content"`
	CreatedAt time.Time `json:"createdAt" url:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideVersionResource) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GuideVersionResource) GetVersion() int {
	if g == nil {
		return 0
	}
	return g.Version
}

func (g *GuideVersionResource) GetContent() string {
	if g == nil {
		return ""
	}
	return g.Content
}

func (g *GuideVersionResource) GetCreatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.CreatedAt
}

func (g *GuideVersionResource) GetUpdatedAt() time.Time {
	if g == nil {
		return time.Time{}
	}
	return g.UpdatedAt
}

func (g *GuideVersionResource) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideVersionResource) UnmarshalJSON(data []byte) error {
	type embed GuideVersionResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GuideVersionResource(unmarshaler.embed)
	g.CreatedAt = unmarshaler.CreatedAt.Time()
	g.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideVersionResource) MarshalJSON() ([]byte, error) {
	type embed GuideVersionResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*g),
		CreatedAt: internal.NewDateTime(g.CreatedAt),
		UpdatedAt: internal.NewDateTime(g.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (g *GuideVersionResource) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GuideVersionResponse struct {
	Data *GuideVersionResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuideVersionResponse) GetData() *GuideVersionResource {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GuideVersionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuideVersionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GuideVersionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuideVersionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuideVersionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListEnvironmentsResponse struct {
	Data       []*Environment `json:"data,omitempty" url:"data,omitempty"`
	Pagination *Pagination    `json:"pagination,omitempty" url:"pagination,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEnvironmentsResponse) GetData() []*Environment {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListEnvironmentsResponse) GetPagination() *Pagination {
	if l == nil {
		return nil
	}
	return l.Pagination
}

func (l *ListEnvironmentsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEnvironmentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEnvironmentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEnvironmentsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEnvironmentsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
