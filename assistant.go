// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
	time "time"
)

type ListPromptsRequest struct {
	// Type of prompt (default AI_ASSIST)
	PromptType *PromptTypeQueryEnum `json:"-" url:"promptType,omitempty"`
	// Number of prompts to return in a page (default 7)
	PageSize *int `json:"-" url:"pageSize,omitempty"`
	// Based on pageSize, which page of prompts to return
	PageNumber *int `json:"-" url:"pageNumber,omitempty"`
}

type Prompt struct {
	Id PromptId `json:"id" url:"id"`
	// ID of the user/guest who created the prompt
	CreatedById   string         `json:"createdById" url:"createdById"`
	AccountId     AccountId      `json:"accountId" url:"accountId"`
	EnvironmentId *EnvironmentId `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	SpaceId       *SpaceId       `json:"spaceId,omitempty" url:"spaceId,omitempty"`
	// Type of prompt
	PromptType PromptTypeEnum `json:"promptType" url:"promptType"`
	// Text for prompts for AI Assist
	Prompt    string     `json:"prompt" url:"prompt"`
	CreatedAt time.Time  `json:"createdAt" url:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt" url:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt,omitempty" url:"deletedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Prompt) GetId() PromptId {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *Prompt) GetCreatedById() string {
	if p == nil {
		return ""
	}
	return p.CreatedById
}

func (p *Prompt) GetAccountId() AccountId {
	if p == nil {
		return ""
	}
	return p.AccountId
}

func (p *Prompt) GetEnvironmentId() *EnvironmentId {
	if p == nil {
		return nil
	}
	return p.EnvironmentId
}

func (p *Prompt) GetSpaceId() *SpaceId {
	if p == nil {
		return nil
	}
	return p.SpaceId
}

func (p *Prompt) GetPromptType() PromptTypeEnum {
	if p == nil {
		return ""
	}
	return p.PromptType
}

func (p *Prompt) GetPrompt() string {
	if p == nil {
		return ""
	}
	return p.Prompt
}

func (p *Prompt) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *Prompt) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *Prompt) GetDeletedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.DeletedAt
}

func (p *Prompt) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Prompt) UnmarshalJSON(data []byte) error {
	type embed Prompt
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
		DeletedAt *internal.DateTime `json:"deletedAt,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Prompt(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	p.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Prompt) MarshalJSON() ([]byte, error) {
	type embed Prompt
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
		DeletedAt *internal.DateTime `json:"deletedAt,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
		DeletedAt: internal.NewOptionalDateTime(p.DeletedAt),
	}
	return json.Marshal(marshaler)
}

func (p *Prompt) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Create a prompts
type PromptCreate struct {
	// Type of prompt; Defaults to AI_ASSIST
	PromptType    *PromptTypeEnum `json:"promptType,omitempty" url:"promptType,omitempty"`
	Prompt        string          `json:"prompt" url:"prompt"`
	EnvironmentId EnvironmentId   `json:"environmentId" url:"environmentId"`
	SpaceId       SpaceId         `json:"spaceId" url:"spaceId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PromptCreate) GetPromptType() *PromptTypeEnum {
	if p == nil {
		return nil
	}
	return p.PromptType
}

func (p *PromptCreate) GetPrompt() string {
	if p == nil {
		return ""
	}
	return p.Prompt
}

func (p *PromptCreate) GetEnvironmentId() EnvironmentId {
	if p == nil {
		return ""
	}
	return p.EnvironmentId
}

func (p *PromptCreate) GetSpaceId() SpaceId {
	if p == nil {
		return ""
	}
	return p.SpaceId
}

func (p *PromptCreate) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptCreate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptCreate) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Update a prompts
type PromptPatch struct {
	Prompt string `json:"prompt" url:"prompt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PromptPatch) GetPrompt() string {
	if p == nil {
		return ""
	}
	return p.Prompt
}

func (p *PromptPatch) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptPatch) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptPatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptPatch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptPatch) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptResponse struct {
	Data *Prompt `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PromptResponse) GetData() *Prompt {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PromptResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTypeEnum string

const (
	PromptTypeEnumAiAssist             PromptTypeEnum = "AI_ASSIST"
	PromptTypeEnumConstraintGeneration PromptTypeEnum = "CONSTRAINT_GENERATION"
)

func NewPromptTypeEnumFromString(s string) (PromptTypeEnum, error) {
	switch s {
	case "AI_ASSIST":
		return PromptTypeEnumAiAssist, nil
	case "CONSTRAINT_GENERATION":
		return PromptTypeEnumConstraintGeneration, nil
	}
	var t PromptTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptTypeEnum) Ptr() *PromptTypeEnum {
	return &p
}

type PromptTypeQueryEnum string

const (
	PromptTypeQueryEnumAll                  PromptTypeQueryEnum = "ALL"
	PromptTypeQueryEnumAiAssist             PromptTypeQueryEnum = "AI_ASSIST"
	PromptTypeQueryEnumConstraintGeneration PromptTypeQueryEnum = "CONSTRAINT_GENERATION"
)

func NewPromptTypeQueryEnumFromString(s string) (PromptTypeQueryEnum, error) {
	switch s {
	case "ALL":
		return PromptTypeQueryEnumAll, nil
	case "AI_ASSIST":
		return PromptTypeQueryEnumAiAssist, nil
	case "CONSTRAINT_GENERATION":
		return PromptTypeQueryEnumConstraintGeneration, nil
	}
	var t PromptTypeQueryEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PromptTypeQueryEnum) Ptr() *PromptTypeQueryEnum {
	return &p
}

type PromptsResponse struct {
	Pagination *Pagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Data       []*Prompt   `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PromptsResponse) GetPagination() *Pagination {
	if p == nil {
		return nil
	}
	return p.Pagination
}

func (p *PromptsResponse) GetData() []*Prompt {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PromptsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PromptsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
