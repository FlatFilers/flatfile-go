// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/FlatFilers/flatfile-go/internal"
	time "time"
)

type GetConstraintsRequest struct {
	// Whether to include built-in constraints
	IncludeBuiltins *bool `json:"-" url:"includeBuiltins,omitempty"`
}

// An app
type App struct {
	Id                 AppId       `json:"id" url:"id"`
	Name               string      `json:"name" url:"name"`
	Namespace          string      `json:"namespace" url:"namespace"`
	Type               AppType     `json:"type" url:"type"`
	Entity             string      `json:"entity" url:"entity"`
	EntityPlural       string      `json:"entityPlural" url:"entityPlural"`
	Icon               *string     `json:"icon,omitempty" url:"icon,omitempty"`
	Metadata           interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	EnvironmentFilters interface{} `json:"environmentFilters,omitempty" url:"environmentFilters,omitempty"`
	Blueprint          interface{} `json:"blueprint,omitempty" url:"blueprint,omitempty"`
	CreatedAt          time.Time   `json:"createdAt" url:"createdAt"`
	UpdatedAt          time.Time   `json:"updatedAt" url:"updatedAt"`
	DeletedAt          *time.Time  `json:"deletedAt,omitempty" url:"deletedAt,omitempty"`
	ActivatedAt        *time.Time  `json:"activatedAt,omitempty" url:"activatedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *App) GetId() AppId {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *App) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *App) GetNamespace() string {
	if a == nil {
		return ""
	}
	return a.Namespace
}

func (a *App) GetType() AppType {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *App) GetEntity() string {
	if a == nil {
		return ""
	}
	return a.Entity
}

func (a *App) GetEntityPlural() string {
	if a == nil {
		return ""
	}
	return a.EntityPlural
}

func (a *App) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *App) GetMetadata() interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *App) GetEnvironmentFilters() interface{} {
	if a == nil {
		return nil
	}
	return a.EnvironmentFilters
}

func (a *App) GetBlueprint() interface{} {
	if a == nil {
		return nil
	}
	return a.Blueprint
}

func (a *App) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *App) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

func (a *App) GetDeletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *App) GetActivatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ActivatedAt
}

func (a *App) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *App) UnmarshalJSON(data []byte) error {
	type embed App
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"createdAt"`
		UpdatedAt   *internal.DateTime `json:"updatedAt"`
		DeletedAt   *internal.DateTime `json:"deletedAt,omitempty"`
		ActivatedAt *internal.DateTime `json:"activatedAt,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = App(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()
	a.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	a.ActivatedAt = unmarshaler.ActivatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *App) MarshalJSON() ([]byte, error) {
	type embed App
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"createdAt"`
		UpdatedAt   *internal.DateTime `json:"updatedAt"`
		DeletedAt   *internal.DateTime `json:"deletedAt,omitempty"`
		ActivatedAt *internal.DateTime `json:"activatedAt,omitempty"`
	}{
		embed:       embed(*a),
		CreatedAt:   internal.NewDateTime(a.CreatedAt),
		UpdatedAt:   internal.NewDateTime(a.UpdatedAt),
		DeletedAt:   internal.NewOptionalDateTime(a.DeletedAt),
		ActivatedAt: internal.NewOptionalDateTime(a.ActivatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *App) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Create an app
type AppCreate struct {
	Name               string      `json:"name" url:"name"`
	Namespace          string      `json:"namespace" url:"namespace"`
	Type               AppType     `json:"type" url:"type"`
	Entity             *string     `json:"entity,omitempty" url:"entity,omitempty"`
	EntityPlural       *string     `json:"entityPlural,omitempty" url:"entityPlural,omitempty"`
	Icon               *string     `json:"icon,omitempty" url:"icon,omitempty"`
	Metadata           interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	EnvironmentFilters interface{} `json:"environmentFilters,omitempty" url:"environmentFilters,omitempty"`
	Blueprint          interface{} `json:"blueprint,omitempty" url:"blueprint,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AppCreate) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppCreate) GetNamespace() string {
	if a == nil {
		return ""
	}
	return a.Namespace
}

func (a *AppCreate) GetType() AppType {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AppCreate) GetEntity() *string {
	if a == nil {
		return nil
	}
	return a.Entity
}

func (a *AppCreate) GetEntityPlural() *string {
	if a == nil {
		return nil
	}
	return a.EntityPlural
}

func (a *AppCreate) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AppCreate) GetMetadata() interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *AppCreate) GetEnvironmentFilters() interface{} {
	if a == nil {
		return nil
	}
	return a.EnvironmentFilters
}

func (a *AppCreate) GetBlueprint() interface{} {
	if a == nil {
		return nil
	}
	return a.Blueprint
}

func (a *AppCreate) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler AppCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppCreate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AppCreate) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Update an app
type AppPatch struct {
	Name               *string     `json:"name,omitempty" url:"name,omitempty"`
	Namespace          *string     `json:"namespace,omitempty" url:"namespace,omitempty"`
	Entity             *string     `json:"entity,omitempty" url:"entity,omitempty"`
	EntityPlural       *string     `json:"entityPlural,omitempty" url:"entityPlural,omitempty"`
	Icon               *string     `json:"icon,omitempty" url:"icon,omitempty"`
	Metadata           interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	EnvironmentFilters interface{} `json:"environmentFilters,omitempty" url:"environmentFilters,omitempty"`
	Blueprint          interface{} `json:"blueprint,omitempty" url:"blueprint,omitempty"`
	ActivatedAt        *time.Time  `json:"activatedAt,omitempty" url:"activatedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AppPatch) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AppPatch) GetNamespace() *string {
	if a == nil {
		return nil
	}
	return a.Namespace
}

func (a *AppPatch) GetEntity() *string {
	if a == nil {
		return nil
	}
	return a.Entity
}

func (a *AppPatch) GetEntityPlural() *string {
	if a == nil {
		return nil
	}
	return a.EntityPlural
}

func (a *AppPatch) GetIcon() *string {
	if a == nil {
		return nil
	}
	return a.Icon
}

func (a *AppPatch) GetMetadata() interface{} {
	if a == nil {
		return nil
	}
	return a.Metadata
}

func (a *AppPatch) GetEnvironmentFilters() interface{} {
	if a == nil {
		return nil
	}
	return a.EnvironmentFilters
}

func (a *AppPatch) GetBlueprint() interface{} {
	if a == nil {
		return nil
	}
	return a.Blueprint
}

func (a *AppPatch) GetActivatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ActivatedAt
}

func (a *AppPatch) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppPatch) UnmarshalJSON(data []byte) error {
	type embed AppPatch
	var unmarshaler = struct {
		embed
		ActivatedAt *internal.DateTime `json:"activatedAt,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AppPatch(unmarshaler.embed)
	a.ActivatedAt = unmarshaler.ActivatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AppPatch) MarshalJSON() ([]byte, error) {
	type embed AppPatch
	var marshaler = struct {
		embed
		ActivatedAt *internal.DateTime `json:"activatedAt,omitempty"`
	}{
		embed:       embed(*a),
		ActivatedAt: internal.NewOptionalDateTime(a.ActivatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AppPatch) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AppResponse struct {
	Data *App `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AppResponse) GetData() *App {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AppResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AppResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AppType string

const (
	AppTypePortal    AppType = "PORTAL"
	AppTypeProjects  AppType = "PROJECTS"
	AppTypeMapping   AppType = "MAPPING"
	AppTypeWorkbooks AppType = "WORKBOOKS"
	AppTypeCustom    AppType = "CUSTOM"
)

func NewAppTypeFromString(s string) (AppType, error) {
	switch s {
	case "PORTAL":
		return AppTypePortal, nil
	case "PROJECTS":
		return AppTypeProjects, nil
	case "MAPPING":
		return AppTypeMapping, nil
	case "WORKBOOKS":
		return AppTypeWorkbooks, nil
	case "CUSTOM":
		return AppTypeCustom, nil
	}
	var t AppType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AppType) Ptr() *AppType {
	return &a
}

type AppsResponse struct {
	Data []*App `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AppsResponse) GetData() []*App {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AppsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AppsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AppsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AppsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AppsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ConstraintCreate struct {
	Description *string     `json:"description,omitempty" url:"description,omitempty"`
	Function    *string     `json:"function,omitempty" url:"function,omitempty"`
	Options     interface{} `json:"options,omitempty" url:"options,omitempty"`
	Label       *string     `json:"label,omitempty" url:"label,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintCreate) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConstraintCreate) GetFunction() *string {
	if c == nil {
		return nil
	}
	return c.Function
}

func (c *ConstraintCreate) GetOptions() interface{} {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *ConstraintCreate) GetLabel() *string {
	if c == nil {
		return nil
	}
	return c.Label
}

func (c *ConstraintCreate) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintCreate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintCreate) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintResource struct {
	Id          ConstraintId `json:"id" url:"id"`
	AppId       AppId        `json:"appId" url:"appId"`
	Validator   string       `json:"validator" url:"validator"`
	Description *string      `json:"description,omitempty" url:"description,omitempty"`
	Function    *string      `json:"function,omitempty" url:"function,omitempty"`
	Options     interface{}  `json:"options,omitempty" url:"options,omitempty"`
	Label       *string      `json:"label,omitempty" url:"label,omitempty"`
	CreatedAt   time.Time    `json:"createdAt" url:"createdAt"`
	UpdatedAt   time.Time    `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintResource) GetId() ConstraintId {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ConstraintResource) GetAppId() AppId {
	if c == nil {
		return ""
	}
	return c.AppId
}

func (c *ConstraintResource) GetValidator() string {
	if c == nil {
		return ""
	}
	return c.Validator
}

func (c *ConstraintResource) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConstraintResource) GetFunction() *string {
	if c == nil {
		return nil
	}
	return c.Function
}

func (c *ConstraintResource) GetOptions() interface{} {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *ConstraintResource) GetLabel() *string {
	if c == nil {
		return nil
	}
	return c.Label
}

func (c *ConstraintResource) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ConstraintResource) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ConstraintResource) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintResource) UnmarshalJSON(data []byte) error {
	type embed ConstraintResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConstraintResource(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintResource) MarshalJSON() ([]byte, error) {
	type embed ConstraintResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ConstraintResource) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintResponse struct {
	Data *ConstraintResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintResponse) GetData() *ConstraintResource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ConstraintResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintUpdate struct {
	Description *string     `json:"description,omitempty" url:"description,omitempty"`
	Function    *string     `json:"function,omitempty" url:"function,omitempty"`
	Options     interface{} `json:"options,omitempty" url:"options,omitempty"`
	Label       *string     `json:"label,omitempty" url:"label,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintUpdate) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConstraintUpdate) GetFunction() *string {
	if c == nil {
		return nil
	}
	return c.Function
}

func (c *ConstraintUpdate) GetOptions() interface{} {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *ConstraintUpdate) GetLabel() *string {
	if c == nil {
		return nil
	}
	return c.Label
}

func (c *ConstraintUpdate) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintUpdate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintUpdate) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintVersionResource struct {
	Id          ConstraintId `json:"id" url:"id"`
	AppId       AppId        `json:"appId" url:"appId"`
	Validator   string       `json:"validator" url:"validator"`
	Description *string      `json:"description,omitempty" url:"description,omitempty"`
	Function    *string      `json:"function,omitempty" url:"function,omitempty"`
	Options     interface{}  `json:"options,omitempty" url:"options,omitempty"`
	Label       *string      `json:"label,omitempty" url:"label,omitempty"`
	CreatedAt   time.Time    `json:"createdAt" url:"createdAt"`
	UpdatedAt   time.Time    `json:"updatedAt" url:"updatedAt"`
	Version     int          `json:"version" url:"version"`
	Prompt      *string      `json:"prompt,omitempty" url:"prompt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintVersionResource) GetId() ConstraintId {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ConstraintVersionResource) GetAppId() AppId {
	if c == nil {
		return ""
	}
	return c.AppId
}

func (c *ConstraintVersionResource) GetValidator() string {
	if c == nil {
		return ""
	}
	return c.Validator
}

func (c *ConstraintVersionResource) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConstraintVersionResource) GetFunction() *string {
	if c == nil {
		return nil
	}
	return c.Function
}

func (c *ConstraintVersionResource) GetOptions() interface{} {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *ConstraintVersionResource) GetLabel() *string {
	if c == nil {
		return nil
	}
	return c.Label
}

func (c *ConstraintVersionResource) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ConstraintVersionResource) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ConstraintVersionResource) GetVersion() int {
	if c == nil {
		return 0
	}
	return c.Version
}

func (c *ConstraintVersionResource) GetPrompt() *string {
	if c == nil {
		return nil
	}
	return c.Prompt
}

func (c *ConstraintVersionResource) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintVersionResource) UnmarshalJSON(data []byte) error {
	type embed ConstraintVersionResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConstraintVersionResource(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintVersionResource) MarshalJSON() ([]byte, error) {
	type embed ConstraintVersionResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ConstraintVersionResource) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintVersionResponse struct {
	Data *ConstraintVersionResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintVersionResponse) GetData() *ConstraintVersionResource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ConstraintVersionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintVersionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintVersionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintVersionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintVersionResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintVersionsResponse struct {
	Data []*ConstraintVersionResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintVersionsResponse) GetData() []*ConstraintVersionResource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ConstraintVersionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintVersionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintVersionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintVersionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintVersionsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConstraintsResponse struct {
	Data []*ConstraintResource `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConstraintsResponse) GetData() []*ConstraintResource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ConstraintsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConstraintsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConstraintsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConstraintsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConstraintsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type SuccessResponse struct {
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SuccessResponse) GetSuccess() bool {
	if s == nil {
		return false
	}
	return s.Success
}

func (s *SuccessResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuccessResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SuccessResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuccessResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuccessResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
